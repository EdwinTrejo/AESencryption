// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\test\MATLAB_Function1.v
// Created: 2020-12-21 22:09:13
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MATLAB_Function1
// Source Path: test/MATLAB Function1
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MATLAB_Function1
          (key1,
           key2,
           key3,
           key4,
           key5,
           key6,
           key7,
           key8,
           key9,
           key10,
           key11,
           key12,
           key13,
           key14,
           key15,
           key16,
           w1,
           w2,
           w3,
           w4,
           w5,
           w6,
           w7,
           w8,
           w9,
           w10,
           w11,
           w12,
           w13,
           w14,
           w15,
           w16,
           w17,
           w18,
           w19,
           w20,
           w21,
           w22,
           w23,
           w24,
           w25,
           w26,
           w27,
           w28,
           w29,
           w30,
           w31,
           w32,
           w33,
           w34,
           w35,
           w36,
           w37,
           w38,
           w39,
           w40,
           w41,
           w42,
           w43,
           w44);


  input   [7:0] key1;  // uint8
  input   [7:0] key2;  // uint8
  input   [7:0] key3;  // uint8
  input   [7:0] key4;  // uint8
  input   [7:0] key5;  // uint8
  input   [7:0] key6;  // uint8
  input   [7:0] key7;  // uint8
  input   [7:0] key8;  // uint8
  input   [7:0] key9;  // uint8
  input   [7:0] key10;  // uint8
  input   [7:0] key11;  // uint8
  input   [7:0] key12;  // uint8
  input   [7:0] key13;  // uint8
  input   [7:0] key14;  // uint8
  input   [7:0] key15;  // uint8
  input   [7:0] key16;  // uint8
  output  [31:0] w1;  // uint32
  output  [31:0] w2;  // uint32
  output  [31:0] w3;  // uint32
  output  [31:0] w4;  // uint32
  output  [31:0] w5;  // uint32
  output  [31:0] w6;  // uint32
  output  [31:0] w7;  // uint32
  output  [31:0] w8;  // uint32
  output  [31:0] w9;  // uint32
  output  [31:0] w10;  // uint32
  output  [31:0] w11;  // uint32
  output  [31:0] w12;  // uint32
  output  [31:0] w13;  // uint32
  output  [31:0] w14;  // uint32
  output  [31:0] w15;  // uint32
  output  [31:0] w16;  // uint32
  output  [31:0] w17;  // uint32
  output  [31:0] w18;  // uint32
  output  [31:0] w19;  // uint32
  output  [31:0] w20;  // uint32
  output  [31:0] w21;  // uint32
  output  [31:0] w22;  // uint32
  output  [31:0] w23;  // uint32
  output  [31:0] w24;  // uint32
  output  [31:0] w25;  // uint32
  output  [31:0] w26;  // uint32
  output  [31:0] w27;  // uint32
  output  [31:0] w28;  // uint32
  output  [31:0] w29;  // uint32
  output  [31:0] w30;  // uint32
  output  [31:0] w31;  // uint32
  output  [31:0] w32;  // uint32
  output  [31:0] w33;  // uint32
  output  [31:0] w34;  // uint32
  output  [31:0] w35;  // uint32
  output  [31:0] w36;  // uint32
  output  [31:0] w37;  // uint32
  output  [31:0] w38;  // uint32
  output  [31:0] w39;  // uint32
  output  [31:0] w40;  // uint32
  output  [31:0] w41;  // uint32
  output  [31:0] w42;  // uint32
  output  [31:0] w43;  // uint32
  output  [31:0] w44;  // uint32


  reg [31:0] w1_1;  // uint32
  reg [31:0] w2_1;  // uint32
  reg [31:0] w3_1;  // uint32
  reg [31:0] w4_1;  // uint32
  reg [31:0] w5_1;  // uint32
  reg [31:0] w6_1;  // uint32
  reg [31:0] w7_1;  // uint32
  reg [31:0] w8_1;  // uint32
  reg [31:0] w9_1;  // uint32
  reg [31:0] w10_1;  // uint32
  reg [31:0] w11_1;  // uint32
  reg [31:0] w12_1;  // uint32
  reg [31:0] w13_1;  // uint32
  reg [31:0] w14_1;  // uint32
  reg [31:0] w15_1;  // uint32
  reg [31:0] w16_1;  // uint32
  reg [31:0] w17_1;  // uint32
  reg [31:0] w18_1;  // uint32
  reg [31:0] w19_1;  // uint32
  reg [31:0] w20_1;  // uint32
  reg [31:0] w21_1;  // uint32
  reg [31:0] w22_1;  // uint32
  reg [31:0] w23_1;  // uint32
  reg [31:0] w24_1;  // uint32
  reg [31:0] w25_1;  // uint32
  reg [31:0] w26_1;  // uint32
  reg [31:0] w27_1;  // uint32
  reg [31:0] w28_1;  // uint32
  reg [31:0] w29_1;  // uint32
  reg [31:0] w30_1;  // uint32
  reg [31:0] w31_1;  // uint32
  reg [31:0] w32_1;  // uint32
  reg [31:0] w33_1;  // uint32
  reg [31:0] w34_1;  // uint32
  reg [31:0] w35_1;  // uint32
  reg [31:0] w36_1;  // uint32
  reg [31:0] w37_1;  // uint32
  reg [31:0] w38_1;  // uint32
  reg [31:0] w39_1;  // uint32
  reg [31:0] w40_1;  // uint32
  reg [31:0] w41_1;  // uint32
  reg [31:0] w42_1;  // uint32
  reg [31:0] w43_1;  // uint32
  reg [31:0] w44_1;  // uint32
  reg [31:0] w51;  // uint32
  reg [31:0] w61;  // uint32
  reg [31:0] w71;  // uint32
  reg [31:0] w81;  // uint32
  reg [31:0] w101;  // uint32
  reg [31:0] w111;  // uint32
  reg [31:0] w241;  // uint32
  reg [31:0] w261;  // uint32
  reg [31:0] w281;  // uint32
  reg [31:0] w301;  // uint32
  reg [31:0] w311;  // uint32
  reg [31:0] w321;  // uint32
  reg [31:0] w341;  // uint32
  reg [31:0] w351;  // uint32
  reg [31:0] w361;  // uint32
  reg [31:0] w381;  // uint32
  reg [31:0] w391;  // uint32
  reg [31:0] w401;  // uint32
  reg [31:0] w421;  // uint32
  reg [31:0] w431;  // uint32
  reg [31:0] w [0:43];  // uint32 [44]
  reg [31:0] w5_temp;  // uint32
  reg [31:0] temp;  // ufix32
  reg [31:0] w_0;  // uint32
  reg [31:0] temp_0;  // ufix32
  reg [31:0] w_1;  // uint32
  reg [31:0] temp_1;  // ufix32
  reg [31:0] w_2;  // uint32
  reg [31:0] temp_2;  // ufix32
  reg [31:0] w_3;  // uint32
  reg [31:0] temp_3;  // ufix32
  reg [31:0] w_4;  // uint32
  reg [31:0] temp_4;  // ufix32
  reg [31:0] w_5;  // uint32
  reg [31:0] temp_5;  // ufix32
  reg [31:0] w_6;  // uint32
  reg [31:0] temp_6;  // ufix32
  reg [31:0] w_7;  // uint32
  reg [31:0] temp_7;  // ufix32
  reg [31:0] w_8;  // uint32
  reg [31:0] temp_8;  // ufix32
  reg [31:0] w_9;  // uint32
  reg [31:0] temp_9;  // ufix32
  reg [31:0] w_10;  // uint32
  reg [31:0] temp_10;  // ufix32
  reg [31:0] c;  // ufix32
  reg [31:0] c_0;  // ufix32
  reg [31:0] c_1;  // ufix32
  reg [31:0] c_2;  // ufix32
  reg [31:0] c_3;  // ufix32
  reg [31:0] c_4;  // ufix32
  reg [31:0] c_5;  // ufix32
  reg [31:0] c_6;  // ufix32
  reg [31:0] c_7;  // ufix32
  reg [31:0] c_8;  // ufix32
  reg [31:0] c_9;  // ufix32
  reg [31:0] c_10;  // ufix32
  reg signed [31:0] t_0;  // int32
  reg [7:0] cast;  // uint8
  reg [15:0] add_cast;  // uint16
  reg [15:0] cast_0;  // uint16
  reg [32:0] add_temp;  // ufix33
  reg [32:0] add_temp_0;  // ufix33
  reg [32:0] add_temp_1;  // ufix33
  reg [32:0] add_temp_2;  // ufix33
  reg [32:0] add_temp_3;  // ufix33
  reg [32:0] add_temp_4;  // ufix33
  reg [32:0] add_temp_5;  // ufix33
  reg [32:0] add_temp_6;  // ufix33
  reg [32:0] add_temp_7;  // ufix33
  reg [32:0] add_temp_8;  // ufix33
  reg [32:0] add_temp_9;  // ufix33
  reg [32:0] add_temp_10;  // ufix33
  reg signed [31:0] t_1;  // int32
  reg [31:0] t_2;  // uint32
  reg [31:0] t_3;  // uint32
  reg [31:0] t_4;  // uint32
  reg [31:0] t_5;  // uint32
  reg signed [31:0] t_6;  // int32
  reg [32:0] t_7;  // ufix33
  reg [32:0] t_8;  // ufix33
  reg [32:0] t_9;  // ufix33
  reg [32:0] t_10;  // ufix33
  reg [32:0] t_11;  // ufix33
  reg [32:0] t_12;  // ufix33
  reg [32:0] t_13;  // ufix33
  reg [32:0] t_14;  // ufix33
  reg [32:0] t_15;  // ufix33
  reg [32:0] t_16;  // ufix33
  reg [32:0] t_17;  // ufix33
  reg [32:0] t_18;  // ufix33
  reg [32:0] t_19;  // ufix33
  reg [32:0] t_20;  // ufix33
  reg [32:0] t_21;  // ufix33
  reg [32:0] t_22;  // ufix33
  reg [32:0] t_23;  // ufix33
  reg [32:0] t_24;  // ufix33
  reg [32:0] t_25;  // ufix33
  reg [32:0] t_26;  // ufix33
  reg [32:0] t_27;  // ufix33
  reg [32:0] t_28;  // ufix33
  reg [32:0] t_29;  // ufix33
  reg [32:0] t_30;  // ufix33


  always @(key1, key10, key11, key12, key13, key14, key15, key16, key2, key3, key4, key5,
       key6, key7, key8, key9) begin
    //     round constant do not delete

    for(t_0 = 32'sd0; t_0 <= 32'sd43; t_0 = t_0 + 32'sd1) begin
      w[t_0] = 32'd0;
    end

    // first loop worked out:
    // iteration 1:
    w[0] = {24'b0, key1};
    cast = w[0][7:0];
    temp = {24'b0, cast};
    c = temp <<< 8'd8;
    t_1 = c;
    w[0] = t_1;
    add_cast = w[0][15:0];
    t_2 = {16'b0, add_cast};
    t_3 = {24'b0, key2};
    w[0] = t_2 + t_3;
    cast_0 = w[0][15:0];
    temp_0 = {16'b0, cast_0};
    c_0 = temp_0 <<< 8'd8;
    w_0 = c_0;
    w[0] = w_0;
    t_4 = {24'b0, key3};
    w[0] = w[0] + t_4;
    t_6 = w[0];
    temp_1 = t_6;
    c_1 = temp_1 <<< 8'd8;
    w_1 = c_1;
    w[0] = w_1;
    t_5 = {24'b0, key4};
    w[0] = w[0] + t_5;
    // iteration 2:
    t_7 = {1'b0, w[1]};
    t_8 = {25'b0, key5};
    add_temp = t_7 + t_8;
    if (add_temp[32] != 1'b0) begin
      w[1] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[1] = add_temp[31:0];
    end
    temp_2 = w[1];
    c_2 = temp_2 <<< 8'd8;
    w_2 = c_2;
    w[1] = w_2;
    t_9 = {1'b0, w[1]};
    t_10 = {25'b0, key6};
    add_temp_0 = t_9 + t_10;
    if (add_temp_0[32] != 1'b0) begin
      w[1] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[1] = add_temp_0[31:0];
    end
    temp_3 = w[1];
    c_3 = temp_3 <<< 8'd8;
    w_3 = c_3;
    w[1] = w_3;
    t_11 = {1'b0, w[1]};
    t_12 = {25'b0, key7};
    add_temp_1 = t_11 + t_12;
    if (add_temp_1[32] != 1'b0) begin
      w[1] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[1] = add_temp_1[31:0];
    end
    temp_4 = w[1];
    c_4 = temp_4 <<< 8'd8;
    w_4 = c_4;
    w[1] = w_4;
    t_13 = {1'b0, w[1]};
    t_14 = {25'b0, key8};
    add_temp_2 = t_13 + t_14;
    if (add_temp_2[32] != 1'b0) begin
      w[1] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[1] = add_temp_2[31:0];
    end
    // iteration 3:
    t_15 = {1'b0, w[2]};
    t_16 = {25'b0, key9};
    add_temp_3 = t_15 + t_16;
    if (add_temp_3[32] != 1'b0) begin
      w[2] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[2] = add_temp_3[31:0];
    end
    temp_5 = w[2];
    c_5 = temp_5 <<< 8'd8;
    w_5 = c_5;
    w[2] = w_5;
    t_17 = {1'b0, w[2]};
    t_18 = {25'b0, key10};
    add_temp_4 = t_17 + t_18;
    if (add_temp_4[32] != 1'b0) begin
      w[2] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[2] = add_temp_4[31:0];
    end
    temp_6 = w[2];
    c_6 = temp_6 <<< 8'd8;
    w_6 = c_6;
    w[2] = w_6;
    t_19 = {1'b0, w[2]};
    t_20 = {25'b0, key11};
    add_temp_5 = t_19 + t_20;
    if (add_temp_5[32] != 1'b0) begin
      w[2] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[2] = add_temp_5[31:0];
    end
    temp_7 = w[2];
    c_7 = temp_7 <<< 8'd8;
    w_7 = c_7;
    w[2] = w_7;
    t_21 = {1'b0, w[2]};
    t_22 = {25'b0, key12};
    add_temp_6 = t_21 + t_22;
    if (add_temp_6[32] != 1'b0) begin
      w[2] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[2] = add_temp_6[31:0];
    end
    // iteration 4:
    t_23 = {1'b0, w[3]};
    t_24 = {25'b0, key13};
    add_temp_7 = t_23 + t_24;
    if (add_temp_7[32] != 1'b0) begin
      w[3] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[3] = add_temp_7[31:0];
    end
    temp_8 = w[3];
    c_8 = temp_8 <<< 8'd8;
    w_8 = c_8;
    w[3] = w_8;
    t_25 = {1'b0, w[3]};
    t_26 = {25'b0, key14};
    add_temp_8 = t_25 + t_26;
    if (add_temp_8[32] != 1'b0) begin
      w[3] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[3] = add_temp_8[31:0];
    end
    temp_9 = w[3];
    c_9 = temp_9 <<< 8'd8;
    w_9 = c_9;
    w[3] = w_9;
    t_27 = {1'b0, w[3]};
    t_28 = {25'b0, key15};
    add_temp_9 = t_27 + t_28;
    if (add_temp_9[32] != 1'b0) begin
      w[3] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[3] = add_temp_9[31:0];
    end
    temp_10 = w[3];
    c_10 = temp_10 <<< 8'd8;
    w_10 = c_10;
    w[3] = w_10;
    t_29 = {1'b0, w[3]};
    t_30 = {25'b0, key16};
    add_temp_10 = t_29 + t_30;
    if (add_temp_10[32] != 1'b0) begin
      w[3] = 32'b11111111111111111111111111111111;
    end
    else begin
      w[3] = add_temp_10[31:0];
    end
    //     %the rest of the blocks
    //     for i = 4:43
    // 		temp = uint32(w(i));
    //         if (mod(i, 4) == 0) % this has been changed 
    // 			temp = uint32(RotWord(temp));
    // 			temp = uint32(SubWord(temp));
    // 			temp = uint32(bitxor(temp, Rcon(floor((i+1) / 4 )+1))); % might need to be i + 1
    //         end
    // 		w(i+1) = bitxor(w(i - 3), temp);
    //     end
    w5_temp = w[3];
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w51 = w[0] ^ w5_temp;
    w61 = w51 ^ w[1];
    w71 = w61 ^ w[2];
    w81 = w71 ^ w[3];
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w101 = w51 ^ w61;
    w111 = w101 ^ w71;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w241 = 32'd0;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w261 = w241 ^ w51;
    w281 = w261 ^ w51;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w301 = w51 ^ w261;
    w311 = w301 ^ w51;
    w321 = w311 ^ w281;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w341 = w51 ^ w301;
    w351 = w341 ^ w311;
    w361 = w351 ^ w321;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w381 = w51 ^ w341;
    w391 = w381 ^ w351;
    w401 = w391 ^ w361;
    //rotate word for KeyExpansion
    //B1 -> B4
    //B2 -> B1
    //B3 -> B2
    //B4 -> B3
    //       // 4  3  2  1
    //       // 3c 4f cf 09
    //       // cf 4f 3c 09
    // did not mess with indexing
    //sub byte
    //uint8_t words[4] = { 0 };
    //     words = uint8(zeros(1,4));
    // 	words = BreakWordDown(words, word);
    //ascii numbering
    //ascii numbering
    //ascii numbering
    //ascii numbering
    w421 = w51 ^ w381;
    w431 = w421 ^ w391;
    w1_1 = w[0];
    w2_1 = w[1];
    w3_1 = w[2];
    w4_1 = w[3];
    w5_1 = w51;
    w6_1 = w61;
    w7_1 = w71;
    w8_1 = w81;
    w9_1 = w51;
    w10_1 = w101;
    w11_1 = w111;
    w12_1 = w111 ^ w81;
    w13_1 = w51;
    w14_1 = 32'd0;
    w15_1 = 32'd0;
    w16_1 = 32'd0;
    w17_1 = w51;
    w18_1 = w51;
    w19_1 = w51;
    w20_1 = w51;
    w21_1 = w51;
    w22_1 = 32'd0;
    w23_1 = w51;
    w24_1 = w241;
    w25_1 = w51;
    w26_1 = w261;
    w27_1 = w51;
    w28_1 = w281;
    w29_1 = w51;
    w30_1 = w301;
    w31_1 = w311;
    w32_1 = w321;
    w33_1 = w51;
    w34_1 = w341;
    w35_1 = w351;
    w36_1 = w361;
    w37_1 = w51;
    w38_1 = w381;
    w39_1 = w391;
    w40_1 = w401;
    w41_1 = w51;
    w42_1 = w421;
    w43_1 = w431;
    w44_1 = w431 ^ w401;
  end



  assign w1 = w1_1;

  assign w2 = w2_1;

  assign w3 = w3_1;

  assign w4 = w4_1;

  assign w5 = w5_1;

  assign w6 = w6_1;

  assign w7 = w7_1;

  assign w8 = w8_1;

  assign w9 = w9_1;

  assign w10 = w10_1;

  assign w11 = w11_1;

  assign w12 = w12_1;

  assign w13 = w13_1;

  assign w14 = w14_1;

  assign w15 = w15_1;

  assign w16 = w16_1;

  assign w17 = w17_1;

  assign w18 = w18_1;

  assign w19 = w19_1;

  assign w20 = w20_1;

  assign w21 = w21_1;

  assign w22 = w22_1;

  assign w23 = w23_1;

  assign w24 = w24_1;

  assign w25 = w25_1;

  assign w26 = w26_1;

  assign w27 = w27_1;

  assign w28 = w28_1;

  assign w29 = w29_1;

  assign w30 = w30_1;

  assign w31 = w31_1;

  assign w32 = w32_1;

  assign w33 = w33_1;

  assign w34 = w34_1;

  assign w35 = w35_1;

  assign w36 = w36_1;

  assign w37 = w37_1;

  assign w38 = w38_1;

  assign w39 = w39_1;

  assign w40 = w40_1;

  assign w41 = w41_1;

  assign w42 = w42_1;

  assign w43 = w43_1;

  assign w44 = w44_1;

endmodule  // MATLAB_Function1

